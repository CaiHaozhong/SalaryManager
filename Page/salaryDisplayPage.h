// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef salaryDisplayWindow_h
#define salaryDisplayWindow_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Button.H>
#include<string>
#include <vector>
#include "Storage.h"
#include <FL/Fl_Table_Row.H>
#include <FL/fl_draw.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Table.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>

// Simple demonstration class to derive from Fl_Table_Row
class SalaryTable : public Fl_Table_Row
{
private:
	Fl_Color cell_bgcolor;				// color of cell's bg color
	Fl_Color cell_fgcolor;				// color of cell's fg color
	char* header[3];
	std::vector< std::vector<std::string> > data;
protected:
	void draw_cell(TableContext context,  		// table cell drawing
		int R=0, int C=0, int X=0, int Y=0, int W=0, int H=0);
	static void event_callback(Fl_Widget*, void*);
	void event_callback2();				// callback for table events

public:
	SalaryTable(int x, int y, int w, int h, const char *l=0) : Fl_Table_Row(x,y,w,h,l)
	{
		cell_bgcolor = FL_WHITE;
		cell_fgcolor = FL_BLACK;
		callback(&event_callback, (void*)this);
		header[0] = "SalaryType";
		header[1] = "Money";
		header[2] = "Additional";		
		end();
	}
	~SalaryTable() { }
	Fl_Color GetCellFGColor() const { return(cell_fgcolor); }
	Fl_Color GetCellBGColor() const { return(cell_bgcolor); }
	void SetCellFGColor(Fl_Color val) { cell_fgcolor = val; }
	void SetCellBGColor(Fl_Color val) { cell_bgcolor = val; }

	void setData(const std::vector<SalaryType>& d)
	{
		this->rows(0);
		data.clear();
		for (int i = 0; i < d.size(); i++)
		{
			std::vector<std::string> row;
			SalaryType ed = d.at(i);
			row.push_back(ed.salaryType);
			char mstr[20];
			sprintf(mstr,"%lf",ed.money);
			row.push_back(string(mstr));
			row.push_back(ed.additionDate);
			data.push_back(row);
		}
		this->rows(d.size());
	}
};
class SalaryDisplayPage
{
public:
	SalaryDisplayPage(string personNum):_personNum(personNum)
	{
		querySalary(personNum);
		queryEmployeeData(personNum);

		Fl_Double_Window* o = new Fl_Double_Window(561, 400, "\345\221\230\345\267\245\345\267\245\350\265\204");
		_container = o;
		{ 
			SalaryTable* o = new SalaryTable(25, 155, 520, 215, "\345\221\230\345\267\245\345\267\245\350\265\204\350\241\250");
			_table = o;
			o->cols(3);
			o->col_header(1);
			o->col_header_height(25);
			o->row_height_all(25);
			o->col_width_all(o->w()/3);
			o->selection_color(FL_GREEN);
			o->setData(_salaryData);
			o->end();
		}
		{ 
			Fl_Group* o = new Fl_Group(25, 25, 520, 105, "\345\221\230\345\267\245\344\277\241\346\201\257");
			o->box(FL_FLAT_BOX);
			o->color((Fl_Color)166);
		{ new Fl_Box(45, 38, 65, 29, "\345\220\215\345\255\227\357\274\232");
		} // Fl_Box* o
		{ _personNameBox = new Fl_Box(120, 38, 65, 29);
		} // Fl_Box* personNameBox
		{ new Fl_Box(45, 81, 65, 29, "\351\203\250\351\227\250\357\274\232");
		} // Fl_Box* o
		{ _departNameBox = new Fl_Box(120, 81, 65, 29);
		} // Fl_Box* departNameBox
		{ new Fl_Box(260, 81, 65, 29, "\350\201\214\344\275\215\357\274\232");
		} // Fl_Box* o
		{ _jobNameBox = new Fl_Box(330, 81, 65, 29);
		} // Fl_Box* jobNameBox
		{ new Fl_Box(260, 38, 65, 29, "\346\200\247\345\210\253\357\274\232");
		} // Fl_Box* o
		{ _personGenderBox = new Fl_Box(330, 38, 65, 29);
		} // Fl_Box* personGenderBox
		o->end();
		} // Fl_Group* o
		o->end();	

		setUpWidget();
	}
	~SalaryDisplayPage();
	void show()
	{
		_container->show();
	}

	void vectorAddAll(vector<SalaryType>& container, const vector<SalaryType>& vec)
	{
		for(int i = 0; i < vec.size(); i++)
			container.push_back(vec.at(i));
	}
	void querySalary(string personNum)
	{		
		vectorAddAll(_salaryData,Storage::getInstance()->querySalaryByNum(personNum));
		vectorAddAll(_salaryData,Storage::getInstance()->queryAlterationByNum(personNum));
	}
	void queryEmployeeData(string personNum)
	{
		_employeeData = Storage::getInstance()->queryPersonByNum(personNum).at(0);
	}
	void setUpWidget()
	{
		_table->setData(_salaryData);
		_personNameBox->label(_employeeData.personName.c_str());
		_personGenderBox->label(_employeeData.gender.c_str());
		_departNameBox->label(_employeeData.departName.c_str());
		_jobNameBox->label(_employeeData.jobName.c_str());
	}
private:
	string _personNum;
	vector<SalaryType> _salaryData;
	Fl_Double_Window* _container;
	Fl_Box *_personNameBox;
	Fl_Box *_departNameBox;
	Fl_Box *_jobNameBox;
	Fl_Box *_personGenderBox;
	SalaryTable* _table;

	EmployeeData _employeeData;
};


#endif
